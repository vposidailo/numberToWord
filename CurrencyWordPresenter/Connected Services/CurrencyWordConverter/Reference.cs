//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurrencyWordPresenter.CurrencyWordConverter {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CurrencyWordConverter.ICurrencyWordConverter")]
    public interface ICurrencyWordConverter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyWordConverter/ConvertCurrency", ReplyAction="http://tempuri.org/ICurrencyWordConverter/ConvertCurrencyResponse")]
        string ConvertCurrency(double value, string currencySign);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyWordConverter/ConvertCurrency", ReplyAction="http://tempuri.org/ICurrencyWordConverter/ConvertCurrencyResponse")]
        System.Threading.Tasks.Task<string> ConvertCurrencyAsync(double value, string currencySign);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyWordConverterChannel : CurrencyWordPresenter.CurrencyWordConverter.ICurrencyWordConverter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyWordConverterClient : System.ServiceModel.ClientBase<CurrencyWordPresenter.CurrencyWordConverter.ICurrencyWordConverter>, CurrencyWordPresenter.CurrencyWordConverter.ICurrencyWordConverter {
        
        public CurrencyWordConverterClient() {
        }
        
        public CurrencyWordConverterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyWordConverterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyWordConverterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyWordConverterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ConvertCurrency(double value, string currencySign) {
            return base.Channel.ConvertCurrency(value, currencySign);
        }
        
        public System.Threading.Tasks.Task<string> ConvertCurrencyAsync(double value, string currencySign) {
            return base.Channel.ConvertCurrencyAsync(value, currencySign);
        }
    }
}
